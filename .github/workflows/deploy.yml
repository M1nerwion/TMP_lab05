name: Deploy

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  BUILD_TYPE: Release

jobs:
  rabota:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
       submodules: recursive

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake
        sudo apt-get install -y cmake lcov gcovr python3-pip
        pip install gcovr
      #  sudo apt-get install google-mock
      #  sudo apt-get install libgtest-dev
      # sudo apt-get install libtbb-dev
      #  sudo apt-get install cmake
      #  cd /usr/src/googletest/
      #  sudo mkdir build
      #  cd build
      #  sudo cmake ..
      # sudo make
      #  sudo cp lib/* /usr/lib

    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
      #run: |
        #cmake -B build -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} -DBUILD_TESTS=ON

    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build/tests
      run: ctest -C ${{env.BUILD_TYPE}}

    - name: Install GTest (if not bundled)
      run: |
        sudo apt-get install -y libgtest-dev

    - name: Run tests
      run: |
        cd build/tests && ctest --output-on-failure && ${{github.workspace}}/build/tests/testion
        
    #- name: npm install
      #run: npm install

    #- name: Test
      #run: make test-coverage
    - name: Debug Coverage Files
      run: |
        cd build
        find . -name "*.gcda"
        echo "Checking for coverage files..."

    - name: Generate Coverage Report
      run: |
        cd build
        lcov --capture --directory . --output-file coverage.info --ignore-errors mismatch --rc branch_coverage=1 --rc geninfo_unexecuted_blocks=1
        lcov --remove coverage.info '*/tests/*' '*/_deps/*' '/usr/*' --output-file coverage.info
        lcov --list coverage.info || echo "Failed to list coverage.info"



    - name: Check Coverage File
      run: |
        cd build
        ls -l coverage.info || echo "Coverage file not generated"

    - name: Upload Coverage to Coveralls
      uses: coverallsapp/github-action@master
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        path-to-lcov: ./build/coverage.info
        coveralls-token: ${{ secrets.COVERALLS_REPO_TOKEN }}




